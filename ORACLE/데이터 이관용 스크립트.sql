/* 데이터 이관 작업용 스크립트 
	- DB간 데이터 이관이 필요한 경우 사용 
	- 주로 DBLINK를 사용하는 데이터 이관 시 사용.
*/ 
SET SERVEROUTPUT ON ;
DECLARE 
	TABLE_NM VARCHAR2(200);
	TABLE_SET VARCHAR2(5000);
	MIG_CNT NUMBER;
	SOURCE_CNT VARCHAR2(100);
	TABLESPACE_NM VARCHAR2(100);
	DB_LINK_NM VARCHAR2(100);
	NOT_CHANGED_DB_LINK_NM VARCHAR2(100);
	
	SOURCE_DB VARCHAR2(100);
	TARGET_DB VARCHAR2(100);
	SOURCE_SCHEMA VARCHAR2(100);
	TARGET_SCHEMA VARCHAR2(100);
	
	INSERT_CRI VARCHAR2(20);
	GARTHER_STAT_YN VARCHAR2(10);
	INSERT_SQL_YN  VARCHAR2(10);	
	REGEN_INDEX_YN VARCHAR2(10);	
	COUNT_YN  VARCHAR2(10);	
	
	GRANT_SQL VARCHAR2(1000);
	SIZE_SQL VARCHAR2(1000);
	TODAY_DATE VARCHAR2(20);
	
	COPY_DBA_ACC VARCHAR2(100);
	DBA_ACC VARCHAR2(100);
	
	TYPE CUR_TEST IS REF CURSOR;
	CURSOR_SIZE CUR_TEST;
	CURSOR_IND CUR_TEST;
	GRANT_DDL_Q CUR_TEST;
	
	GRANT_LIST OWN.VW_DBA_GRANT_DDL%ROWTYPE;
	SIZE_LIST OWN.VW_DBA_SEG_SIZE%ROWTYPE;
	
	TYPE V_ARRAY IS TABLE OF VARCHAR2(4000);
	PK_DROP_DDL V_ARRAY;
	INDEX_DROP_DDL V_ARRAY;
	CREATE_INDEX_DDL V_ARRAY;
	CREATE_PK_DDL V_ARRAY;
	ALTER_INDEX_DDL V_ARRAY;
	
	CURSOR DB_LINK_LIST IS 
		SELECT DB_LINK FROM DBA_DB_LINKS 
		WHERE owner = SOURCE_SCHEMA
            AND DB_LINK LIKE '%' || SOURCE_DB || '%' 
			AND ROWNUM <=1;

	CURSOR IND_DDL_LIST IS 
		SELECT 
			PK_DROP_DDL ,
			INDEX_DROP_DDL ,
			CREATE_INDEX_DDL,
			CREATE_PK_DDL,
			ALTER_INDEX_DDL 
		FROM VW_DBA_INDEX_DDL 
		WHERE OWNER = TARGET_SCHEMA AND TABLE_NAME = TABLE_NM;
	
	CURSOR TBL_LIST IS 
	SELECT 
		REGEXP_SUBSTR(A.LIST, '[^,]+', 1, LEVEL) AS SPLIT into table_nm
	FROM 
		( SELECT REPLACE(TABLE_SET, CHR(10), ',') AS LIST FROM DUAL) A 
			CONNECT BY LEVEL <= LENGTH(REGEXP_REPLACE(A.LIST, '[^,]+', ''))+1;
	
BEGIN 
/*==========================변수 입력===========================*/
--소스정보 
SOURCE_DB := 'ORCL';
SOURCE_SCHEMA := 'OWN';

--타겟정보
TARGET_DB := 'ORCL2';
TARGET_SCHEMA := 'OWN';

--DATAPUMP 및 COPY 사용계정 및 PASSWD (특수문자 있는경우 앞에 백슬래시 붙이기  EX) TEST1\! )
DBA_ACC := 'OWN/Test1234';

/* TABLE_NAME ( 테이블 목록입력시, 줄바꿈하여 차례대로 입력 ) */ 
/* 예시 
TABLE_SET := 
'TABLE_NM1
TABLE_NM2'; */

TABLE_SET := 
'PARTITION_TEST';
	
--COUNT_YN (Y/N)
COUNT_YN := 'Y';

--INDEX 출력여부(Y/N)
REGEN_INDEX_YN := 'Y'; 
	
--INSERT 구문 출력여부(Y/N)
INSERT_SQL_YN := 'Y';
	
--데이터 이관방식 선택 (INSERT/COPY/IMPDP/IMP_REPLACE)
INSERT_CRI := 'IMP_REPLACE';
	
--통계정보 출력여부(Y/N) 
GARTHER_STAT_YN := 'Y';

/*===========================================================*/
	
	--현재 시각 확인 
	EXECUTE IMMEDIATE 'SELECT TO_CHAR(SYSDATE, ''YYYYMMDD'') FROM DUAL' INTO TODAY_DATE;
	
	SELECT REPLACE(DBA_ACC, '\', NULL) INTO COPY_DBA_ACC FROM DUAL;
	--'
	
	
	OPEN TBL_LIST;
	LOOP
	FETCH TBL_LIST INTO TABLE_NM;
	EXIT WHEN TBL_LIST%NOTFOUND;
	        
		--사용가능한 DBLINK명 추출 및 변수 할당 
		OPEN DB_LINK_LIST;
            FETCH DB_LINK_LIST INTO DB_LINK_NM;            
		CLOSE DB_LINK_LIST;
		
		IF DB_LINK_NM IS NOT NULL THEN 
			DBMS_OUTPUT.PUT_LINE('/* DB_LINK_NM */');
			DBMS_OUTPUT.PUT_LINE('-- DB_LINK_NM : ' || DB_LINK_NM || CHR(10));
			NOT_CHANGED_DB_LINK_NM := DB_LINK_NM;
			DB_LINK_NM := '@' || DB_LINK_NM ;
			
			--소스DB의 이관대상 테이블의 COUNT 확인 (빠른 출력을 위해 NUM_ROWS로 설정함.)
			IF COUNT_YN = 'Y' THEN 
				execute immediate 'SELECT TO_CHAR(NUM_ROWS, ''FM999,999,999,999'') FROM DBA_TABLES'
					|| DB_LINK_NM 
					|| ' WHERE OWNER = '|| CHR(39) || SOURCE_SCHEMA || CHR(39) 
					|| ' AND TABLE_NAME = ' || CHR(39) || TABLE_NM || CHR(39)
                    INTO SOURCE_CNT;
			ELSE 
				SOURCE_CNT := 'UNKNOWN';
			END IF;
			
			-- 소스 테이블 SIZE 확인용 
			-- DB_LINK 명에 따라 조회 테이블이 달라지므로 EXECUTE IMMEDIATE로 설정 
			SIZE_SQL := 'SELECT * FROM OWN.VW_DBA_SEG_SIZE' || DB_LINK_NM 
							|| ' WHERE OWNER  ='
							|| CHR(39) || SOURCE_SCHEMA || CHR(39) 
							|| ' AND TABLE_NAME = '
							|| CHR(39) || TABLE_NM || CHR(39) ;
			
			EXECUTE IMMEDIATE SIZE_SQL 
				INTO SIZE_LIST.OWNER, SIZE_LIST.TABLE_NAME, SIZE_LIST.TABLESPACE_NAME,
					SIZE_LIST.MB, SIZE_LIST.CLOB_YN , SIZE_LIST.PARTITIONED;
			
			IF SIZE_LIST.CLOB_YN IS NULL THEN 
				SIZE_LIST.CLOB_YN := 'N';
			END IF;
			
			
			--타겟DB 테이블의 TABLESPACE_NAME 추출 ( 테이블스페이스명 동일여부 확인 )
			EXECUTE IMMEDIATE 'SELECT TABLESPACE_NAME FROM OWN.VW_DBA_SEG_SIZE WHERE OWNER = ' 
								|| CHR(39) || TARGET_SCHEMA || CHR(39) 
								|| ' AND TABLE_NAME = ' 
								|| CHR(39) || TABLE_NM || CHR(39) INTO TABLESPACE_NM;
					
			--테이블 관련 속성정보 출력
			DBMS_OUTPUT.PUT_LINE('/* TABLE_PROPETY */ ');
			DBMS_OUTPUT.PUT_LINE('/*');
			DBMS_OUTPUT.PUT_LINE('OWNER : ' || SIZE_LIST.OWNER 
									|| CHR(10) || 'TABLE_NAME : ' || SIZE_LIST.TABLE_NAME 
									|| CHR(10) || 'SOURCE_TABLESPACE : ' || SIZE_LIST.TABLESPACE_NAME
									|| CHR(10) || 'TARGET_TABLESPACE : ' || TABLESPACE_NM 
									|| CHR(10) || 'SOURCE_SIZE(MB) : ' || SIZE_LIST.MB 
									|| CHR(10) || 'CLOB_YN : ' || SIZE_LIST.CLOB_YN									
									|| CHR(10) || 'PARTITIONED : ' || SIZE_LIST.PARTITIONED
									|| CHR(10) || 'SOURCE_NUM_ROWS : ' || SOURCE_CNT );
		
		ELSE 
			DBMS_OUTPUT.PUT_LINE ( '-- NO_DB_LINK');
		END IF;		
		DBMS_OUTPUT.PUT_LINE ('*/');
		
		--index 구문 추출
		if REGEN_INDEX_YN ='Y' then 
			DBMS_OUTPUT.PUT_LINE( '/* INDEX_DDL_LIST */ ');
			
			OPEN IND_DDL_LIST;
			FETCH IND_DDL_LIST BULK COLLECT
				INTO PK_DROP_DDL, INDEX_DROP_DDL, CREATE_INDEX_DDL, CREATE_PK_DDL, ALTER_INDEX_DDL;
			CLOSE IND_DDL_LIST;
			
			--PK_DROP_DDL 
			FOR I IN 1.. PK_DROP_DDL.COUNT
			LOOP 
				IF PK_DROP_DDL(I) IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE( PK_DROP_DDL(I));
				END IF ;
			END LOOP;
			
			--INDEX_DROP_DDL 
			FOR I IN 1.. INDEX_DROP_DDL.COUNT
			LOOP 
				IF INDEX_DROP_DDL(I) IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE(INDEX_DROP_DDL(I));
				END IF;
			END LOOP;
		END IF;
		
		--INSERT 구문 추출 
		IF INSERT_SQL_YN = 'Y' THEN 
			DBMS_OUTPUT.PUT_LINE ( CHR(10) || '/* INSERT_DDL */' );
			
			--DELTE OR TRUNCATE 구문 추출 
			CASE WHEN INSERT_CRI = 'COPY' THEN 
				DBMS_OUTPUT.PUT_LINE ('DELETE FROM ' || TARGET_SCHEMA || '.' || TABLE_NM || ';');
			ELSE
				DBMS_OUTPUT.PUT_LINE('TRUNCATE TABLE ' || TARGET_SCHEMA || '.' || TABLE_NM || ';' );
			END CASE;
			
			--이관방식에 따른 INSERT 구문 추출 
			
			--1.DB_LINK가 없을때 이관방식이 COPY가 아닌 경우 - COPY 혹은 DATAPUMP 사용하도록 권고
			CASE WHEN INSERT_CRI <> 'COPY' AND DB_LINK_NM IS NULL THEN 
				DBMS_OUTPUT.PUT_LINE('!ALERT : NO_DB_LINK. USE COPY OR DATAPUMP');
			
			--2.이관 방식이 'INSERT'인 경우
				 WHEN INSERT_CRI = 'INSERT' AND DB_LINK_NM IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE('INSERT /*+ APPEND */ INTO ' || TARGET_SCHEMA || '.' || TABLE_NM
					|| ' SELECT * FROM ' || SOURCE_SCHEMA || '.' || TABLE_NM || DB_LINK_NM|| ';' || CHR(10) || 'COMMIT;' ) ;
			
			--3.이관 방식이 'COPY'인 경우
				WHEN INSERT_CRI = 'COPY' THEN 
					DBMS_OUTPUT.PUT_LINE('SET ARRAY 5000; ' || CHR(10) 
									|| 'COPY FROM '|| COPY_DBA_ACC ||  '@' || SOURCE_DB 
									|| ' INSERT ' || TARGET_SCHEMA || '.' || TABLE_NM || ' USING SELECT * FROM '
									|| SOURCE_SCHEMA || '.' || table_nm || ';');
			--4.이관 방식이 'IMPDP'인 경우	
				WHEN INSERT_CRI = 'IMPDP' THEN 
					DBMS_OUTPUT.PUT_LINE('nohup impdp ' || DBA_ACC || ' DIRECTORY=DIR_PUMP cluster=NO parallel=4 network_link='|| NOT_CHANGED_DB_LINK_NM );
					DBMS_OUTPUT.PUT_LINE(' tables=' || TARGET_SCHEMA || '.' || TABLE_NM || ' TABLE_EXISTS_ACTION=TRUNCATE'
											|| ' logfile = ' || TABLE_NM || '_' || TODAY_DATE || '_IMP.log');					
					DBMS_OUTPUT.PUT_LINE(' include=TABLE_EXPORT/TABLE/TABLE,TABLE_EXPORT/TABLE/TABLE_DATA,TABLE_EXPORT/TABLE/COMMENT' || ' > '  
										|| TABLE_NM || '_' || TODAY_DATE || '_IMP.out &'
										|| CHR(10) || 'tail -f ' || TABLE_NM || '_' || TODAY_DATE || '_IMP.out');
						
			--5.이관 방식이 'IMP_REPLACE'인 경우	
                WHEN INSERT_CRI = 'IMP_REPLACE' THEN
					DBMS_OUTPUT.PUT_LINE('nohup impdp ' || DBA_ACC || ' DIRECTORY=DIR_PUMP cluster=NO parallel=4 network_link='|| NOT_CHANGED_DB_LINK_NM );
					DBMS_OUTPUT.PUT_LINE(' tables=' || TARGET_SCHEMA || '.' || TABLE_NM || ' TABLE_EXISTS_ACTION=REPLACE'
											|| ' logfile = ' || TABLE_NM || '_' || TODAY_DATE || '_IMP.log');					
					DBMS_OUTPUT.PUT_LINE(' include=TABLE_EXPORT/TABLE/TABLE,TABLE_EXPORT/TABLE/TABLE_DATA,TABLE_EXPORT/TABLE/COMMENT' || ' > '  
										|| TABLE_NM || '_' || TODAY_DATE || '_IMP.out &'
										|| CHR(10) || 'tail -f ' || TABLE_NM || '_' || TODAY_DATE || '_IMP.out');	
			END CASE;
        end if;
			
		--인덱스 재생성구문 추출 
		IF REGEN_INDEX_YN = 'Y' THEN 
			DBMS_OUTPUT.PUT_LINE( CHR(10) || '/* CREATE_INDEX_DDL */');
			
			--CREATE_INDEX_DDL
			FOR I IN 1..CREATE_INDEX_DDL.COUNT 
			LOOP 
				IF CREATE_INDEX_DDL(I) IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE ( CREATE_INDEX_DDL(I));
				END IF;
			END LOOP;
			
			--CREATE_PK_DDL 
			FOR I IN 1..CREATE_PK_DDL.COUNT 
			LOOP 
				IF CREATE_PK_DDL(I) IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE(CREATE_PK_DDL(I));
				END IF ;
			END LOOP;
			
			FOR I IN 1..ALTER_INDEX_DDL.COUNT
			LOOP 
				IF ALTER_INDEX_DDL(I) IS NOT NULL THEN 
					DBMS_OUTPUT.PUT_LINE(ALTER_INDEX_DDL(I));
				END IF ;
			END loop;
		END IF; 
		
		
		--이관방식이 'IMP_REPLACE'인 경우 권한 재생성 구문 추출 
		IF INSERT_CRI = 'IMP_REPLACE' THEN 
			DBMS_OUTPUT.PUT_LINE(CHR(10) || '/* GRANT_DDL*/' ); 
			GRANT_SQL := 'SELECT GRANT_DDL FROM OWN.VW_DBA_GRANT_DDL WHERE OWNER ='
							|| CHR(39) || TARGET_SCHEMA || CHR(39) 
							|| ' AND TABLE_NAME = ' 
							|| CHR(39) || TABLE_NM || CHR(39) ;
				
			OPEN GRANT_DDL_Q FOR GRANT_SQL;
			loop
			FETCH GRANT_DDL_Q INTO GRANT_LIST.GRANT_DDL;
			EXIT WHEN GRANT_DDL_Q%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(GRANT_LIST.GRANT_DDL);
			END LOOP;
			CLOSE GRANT_DDL_Q;
		END IF; 
		
		--통계정보 구문 추출 
		IF GARTHER_STAT_YN ='Y' THEN 
			DBMS_OUTPUT.PUT_LINE(CHR(10) || '/* EXEC DBMS_OUTPUT */');
			DBMS_OUTPUT.PUT_LINE('EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>''' || TARGET_SCHEMA 
								 || ''', TABNAME=>'''
								 || TABLE_NM 
								 || ''', OPTIONS=>''GATHER AUTO'' ,  DEGREE=>4);');
		END IF ;
		
		DBMS_OUTPUT.PUT_LINE ( CHR(10) );

	END LOOP;
	CLOSE TBL_LIST;
end;		
									